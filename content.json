{"meta":{"title":"Blog For Wenzy","subtitle":"","description":"","author":"Wenzy","url":"https://wenzhenyi.github.io"},"pages":[{"title":"标签","date":"2021-07-08T03:32:08.000Z","updated":"2021-07-08T03:38:02.139Z","comments":true,"path":"tags/index.html","permalink":"https://wenzhenyi.github.io/tags/index.html","excerpt":"","text":"标签"}],"posts":[{"title":"React Hooks系列useEffect","slug":"ReactHooks系列-useEffect","date":"2021-07-14T06:30:46.000Z","updated":"2021-07-14T07:01:16.969Z","comments":true,"path":"ReactHooks系列-useEffect/","link":"","permalink":"https://wenzhenyi.github.io/ReactHooks%E7%B3%BB%E5%88%97-useEffect/","excerpt":"","text":"在使用React Hooks时，React Hooks作用非常大，该系列归纳工作中遇到的关于React Hooks api的应用场景和查找资料中深入了解的一些问题，对React的掌握更上一层楼，该系列包含以下内容： useEffect 以下为useEffect的使用： 参考资源精读《useEffect 完全指南》","categories":[],"tags":[{"name":"React","slug":"React","permalink":"https://wenzhenyi.github.io/tags/React/"},{"name":"useEffect","slug":"useEffect","permalink":"https://wenzhenyi.github.io/tags/useEffect/"}],"keywords":[]},{"title":"手写一个Promise","slug":"手写一个Promise","date":"2021-07-08T03:46:39.000Z","updated":"2021-07-08T03:48:32.228Z","comments":true,"path":"手写一个Promise/","link":"","permalink":"https://wenzhenyi.github.io/%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AAPromise/","excerpt":"","text":"前言promise的使用场景很多，手写一个promise也是对自己js知识的一个巩固","categories":[],"tags":[{"name":"javascript","slug":"javascript","permalink":"https://wenzhenyi.github.io/tags/javascript/"}],"keywords":[]},{"title":"css特殊性","slug":"css特殊性","date":"2020-05-01T14:44:52.000Z","updated":"2021-07-08T06:21:52.292Z","comments":false,"path":"css特殊性/","link":"","permalink":"https://wenzhenyi.github.io/css%E7%89%B9%E6%AE%8A%E6%80%A7/","excerpt":"","text":"一下被问到愣住了，现在查阅了资料发现是经常用的，还是要积累一下 CSS的特殊性特殊性是用于计算元素最终使用哪个样式。 先看以下等级划分(由高到低)： important，!important 等级为无穷大∞ 内联样式，在标签内style=””。 等级为1000 ID选择器，#content。 等级为100 类选择器，.content。 等级为10 标签选择器，伪元素选择器，div div:before 等级为1 通配符，* 等级为0 继承 不贡献，比0还小 继承继承不能继承边框，盒子模型的外边距、内边距等等。继承是不贡献特殊性的，但要注意和0的区别。0特殊性会优先于无特殊性 如： 1234*&#123;color: gray&#125;h1&#123;color: black&#125; &lt;h1&gt;css &lt;em&gt;specificity&lt;&#x2F;em&gt;&lt;&#x2F;h1&gt; 其中css为black色，em标签里的specificity为gray色，因为0特殊性比继承值优先级高 应用场景如果遇到了似乎没有起作用的CSS规则，很可能是出现了特殊性冲突。请在你的选择器中添加他的一个父元素的ID，从而提高它的特殊性。如果这能解决问题，就说明样式表中其他地方很可能有更特殊的规则，它覆盖了你的规则。如果是这种情况，你可能需要检查代码，解决特殊性冲突，让代码尽可能简洁。","categories":[],"tags":[{"name":"css","slug":"css","permalink":"https://wenzhenyi.github.io/tags/css/"},{"name":"前端面试","slug":"前端面试","permalink":"https://wenzhenyi.github.io/tags/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/"}],"keywords":[]},{"title":"vsCode中常用的插件","slug":"vsCode中常用的插件","date":"2020-03-26T08:34:34.000Z","updated":"2021-07-08T03:44:44.129Z","comments":false,"path":"vsCode中常用的插件/","link":"","permalink":"https://wenzhenyi.github.io/vsCode%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84%E6%8F%92%E4%BB%B6/","excerpt":"","text":"1. AutoFileName自动补充文件名 2. Chinese适用于 VS Code 的中文（简体）语言包 3. Code Runner用于跑小小一段的代码 4. Git History Diff查看git的历史记录以及比较 5. JavaScript(ES6) code snippets自动补充es6语法 6. Live Server在当前文件夹创建小型服务器 7. Open in Browser右键从浏览器打开此文件 8. Prettier - Code formatter格式化代码 9. Veturvue集成的工具 10. VS Color Picker颜色选择器","categories":[],"tags":[{"name":"vscode","slug":"vscode","permalink":"https://wenzhenyi.github.io/tags/vscode/"},{"name":"2020年3月","slug":"2020年3月","permalink":"https://wenzhenyi.github.io/tags/2020%E5%B9%B43%E6%9C%88/"}],"keywords":[]},{"title":"JS设计模式 - 面向对象","slug":"JS设计模式","date":"2020-03-17T09:48:34.000Z","updated":"2021-07-08T03:48:45.234Z","comments":false,"path":"JS设计模式/","link":"","permalink":"https://wenzhenyi.github.io/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/","excerpt":"","text":"类和对象的概念 类就是拥有相等功能和相同的属性的对象的集合 – 抽象的对象就是类的实例 – 具体 生活角度看类和对象 如果人是类，小名就是对象、小花也是对象如果电脑是类，桌上的这两台电脑就是对象 123456789class Person &#123; constructor(name, age) &#123; this.name &#x3D; name; this.age &#x3D; age; &#125; say() &#123; alert(&#96;$&#123;this.name&#125; is eating&#96;) &#125;&#125; 12345&#x2F;&#x2F; 调用var wang &#x3D; new Person(&quot;wang&quot;, 20); &#x2F;&#x2F; 初始化小王wang.say(); &#x2F;&#x2F; wang is eatingvar zhang &#x3D; new Person(&quot;zhang&quot;, 50); &#x2F;&#x2F; 初始化小张zhang.say(); &#x2F;&#x2F; zhang is eating 面向对象三要素：封装，继承，多态继承（子类继承父类） 作用：继承可将公共方法抽离出来，提高复用，减少冗余 Person类与上面的类一样 12345678910111213class Student extends Person &#123; constructor(name, age, number) &#123; super(name, age); this.number &#x3D; number; &#125; study() &#123; alert(&#96;$&#123;this.name&#125; is studing&#96;); &#125;&#125;var xiaoming &#x3D; new Student(&#39;xiaoming&#39;, 10, &#39;A1&#39;);xiaoming.say(); &#x2F;&#x2F; xiaoming is eatingxiaoming.study(); &#x2F;&#x2F; xiaoming is studing 封装 目前ts内可用，比较规范 以下代码需ts环境下运行 http://www.typescriptlang.org/play/ public 完全开放 protected 对子类开放 private 对自己开放 作用： 减少耦合，不该外露的不外露 利于数据，接口的权限管理 ES6暂时不支持，一般认为 _开头的属性是private 1234567891011121314151617181920212223242526272829303132class Person &#123; name: any age: number protected weight: any &#x2F;&#x2F; 受保护的属性，只有自己或者子类可以访问 constructor(name: any, age: number) &#123; this.name &#x3D; name; this.age &#x3D; age; this.weight &#x3D; 120 &#125; say() &#123; alert(&#96;$&#123;this.name&#125; is eating&#96;) &#125;&#125;class Student extends Person &#123; number: number private girlfriend: any constructor(name: any, age: number, number: number) &#123; super(name, age); this.number &#x3D; number; this.girlfriend &#x3D; &#39;xiaoli&#39; &#125; study() &#123; alert(&#96;$&#123;this.name&#125; is studing&#96;); &#125; getWeight() &#123; alert(&#96;weight $&#123;this.weight&#125;&#96;) &#125;&#125;let xiaoming &#x3D; new Student(&#39;xiaoming&#39;, 10, 12)xiaoming.getWeight() 多态 同一个接口，不同的实现JS 应用极少需要结合Java等语言的接口，重写，重载等功能 作用： 保持了子类的开放性和灵活性 面向接口编程(JS引用较少) 12345678910111213141516171819202122class A extends Person &#123; constructor(name) &#123; super(name) &#125; saySomething() &#123; alert(&quot;Im A&quot;) &#125;&#125;class B extends Person &#123; constructor(name) &#123; super(name) &#125; saySomething() &#123; alert(&quot;Im B&quot;) &#125;&#125;let a &#x3D; new A(&#39;A&#39;)a.saySomething() &#x2F;&#x2F; Im Alet b &#x3D; new B(&#39;B&#39;)b.saySomething() &#x2F;&#x2F; Im B JS应用面向对象实例：1234567891011121314151617181920212223242526272829&#x2F;** * ----------------------------------------------------------------- * JS应用实例 * JQuery *&#x2F;class JQuery &#123; constructor(selector) &#123; let slice &#x3D; Array.prototype.slice let dom &#x3D; slice.call(document.querySelectorAll(selector)) let len &#x3D; dom ? dom.length : 0 for (let i &#x3D; 0; i &lt; len; i++) &#123; this[i] &#x3D; dom[i] &#125; this.length &#x3D; len this.selector &#x3D; selector &#125; append(node) &#123; &#x2F;&#x2F; ... &#125; addClass(name) &#123; &#x2F;&#x2F; ... &#125;&#125;window.$ &#x3D; function(selector) &#123; &#x2F;&#x2F; 工厂模式 return new JQuery(selector)&#125; 为什么要使用面向对象 程序执行：顺序，判断，循环 —结构化 面向对象 — 数据结构化 对于计算机，结构化的东西才是最简单的 编程应该 简单 &amp; 抽象 使用面向对象意义数据结构化","categories":[],"tags":[{"name":"javascript","slug":"javascript","permalink":"https://wenzhenyi.github.io/tags/javascript/"}],"keywords":[]},{"title":"Gulp学习","slug":"Gulp学习","date":"2020-03-13T12:57:57.000Z","updated":"2021-07-07T02:49:46.473Z","comments":false,"path":"Gulp学习/","link":"","permalink":"https://wenzhenyi.github.io/Gulp%E5%AD%A6%E4%B9%A0/","excerpt":"","text":"构建工具: 自动化。对于需要反复重复的任务，例如压缩（minification）、编译、单元测试、linting等，自动化工具可以减轻你的劳动，简化你的工作。 gulp或者grunt都仅仅是一个操作平台，他们本身做不了任何事情，要做事情需要通过插件 1.gulp的使用 全局安装： npm install –global gulp 创建项目： LearnGulp 项目依赖安装： npm install –save-dev gulp 在项目根目录下创建一个名为 gulpfile.js 的文件： var gulp = require(‘gulp’); gulp.task(‘default’, function() { // 将你的默认的任务代码放在这 }); 运行 gulp2.gulp的方法 gulp.task(str,fn) 创建一个gulp任务 gulp.src(path) 文件来源 gulp.dest(path) 操作之后的文件到哪里去 .pipe(package) 执行一个gulp功能 gulp.watch() 监听 gulp.start() 执行gulp任务3.插件 1.压缩JavaScript文件 1.安装插件 npm install –save-dev gulp-uglify 代码 gulp.task(“jsuglify”,function(){ gulp.src(“src/js/demo.js”) .pipe(jsUglify()) .pipe(gulp.dest(“dist/js”)) }) 2.压缩CSS文件 1.安装 npm install –save-dev gulp-minify-css 3.压缩HTML文件 1.安装 npm install –save-dev gulp-minify-html 4.图片压缩 npm install –save-dev gulp-imagemin 5.代码检查 npm install –save-dev gulp-jshint jshint 公司learder自己编写代码规范，按照他的规范来写代码！！！ 6.合并、重命名 npm install –save-dev gulp-concat gulp-rename 7.Less编译为CSS文件 npm install –save-dev gulp-less 8.监听 gulp.task(“watchLess”,function(){ gulp.watch(“src/css/*.less”,function(){ gulp.run(“reless”) }) }) 9.热更新： 1.命令：npm install gulp-livereload –save-dev 2.全局服务器：npm install -g http-server 3.浏览器打开：chrome://extensions/ 浏览器插件：LiveReload （直接点击启动） 4.编写热更新的代码 5.启动热更新 1.在项目根目录下启动http-server 2.启动热更新：hot 3.打开浏览器启动项目 4.启动浏览器（livereload）插件，将空心圆点成实心圆","categories":[],"tags":[{"name":"Gulp","slug":"Gulp","permalink":"https://wenzhenyi.github.io/tags/Gulp/"}],"keywords":[]},{"title":"CSS面试","slug":"20200303CSS面试","date":"2020-03-03T01:55:30.000Z","updated":"2021-07-07T02:49:46.471Z","comments":false,"path":"20200303CSS面试/","link":"","permalink":"https://wenzhenyi.github.io/20200303CSS%E9%9D%A2%E8%AF%95/","excerpt":"","text":"css盒模型 css盒模型基本概念？ 盒模型由content（内容区域），padding（内边距），border（边框），margin（外边距）组成。 当对一个文档进行布局的时候，浏览器的渲染引擎会根据这两个标准的其中一个将所有元素表示为一个个矩形的盒子 分类：标准模型、IE模型 标准模型和IE模型的区别：计算高度和宽度的不同，怎么不同，高度宽度是怎么计算的？ 标准模型 12div宽度 &#x3D; content &#x2F;&#x2F;改变padding或border宽度，div宽度会变化box-sizing:content-box; &#x2F;*设置标准盒子*&#x2F; IE模型（怪异盒子模型） 12div宽度 &#x3D; content + padding + border &#x2F;&#x2F;改变padding或border宽度，div宽度不会变化box-sizing: border-box; &#x2F;*设置标准盒子*&#x2F;","categories":[],"tags":[],"keywords":[]},{"title":"工具网站","slug":"工具网站","date":"2020-03-02T07:38:47.000Z","updated":"2021-07-07T02:49:46.494Z","comments":false,"path":"工具网站/","link":"","permalink":"https://wenzhenyi.github.io/%E5%B7%A5%E5%85%B7%E7%BD%91%E7%AB%99/","excerpt":"","text":"BootCDN-获取线上常用插件的地址稳定、快速、免费的前端开源项目 CDN 加速服务 BootCDN MDN-前端技术文档前端技术文档MDN Can I Use网站-查找各属性方法在各浏览器的兼容情况Can I Use Autoprefixer CSS online-在线添加浏览器css兼容情况Autoprefixer 淘宝 NPM 镜像NPM镜像 前端好用的开发工具FeHelper: chrome插件，包含JSON接口自动格式化，代码美化，代码压缩，二维码生成器，页面取色工具等工具 FeHelper","categories":[],"tags":[],"keywords":[]},{"title":"css等高的方式","slug":"css等高的方式","date":"2020-02-25T01:58:57.000Z","updated":"2021-07-07T02:49:46.490Z","comments":false,"path":"css等高的方式/","link":"","permalink":"https://wenzhenyi.github.io/css%E7%AD%89%E9%AB%98%E7%9A%84%E6%96%B9%E5%BC%8F/","excerpt":"","text":"问题：在一列里，div之间自适应等高，内容垂直居中 html： 1234567&lt;div class&#x3D;&quot;wrap&quot;&gt; &lt;div class&#x3D;&quot;item&quot;&gt;AAAA&lt;&#x2F;div&gt; &lt;div class&#x3D;&quot;item&quot;&gt;BBBBBBBBBBBBBBBBBB&lt;&#x2F;div&gt; &lt;div class&#x3D;&quot;item&quot;&gt;A&lt;&#x2F;div&gt; &lt;div class&#x3D;&quot;item&quot;&gt;CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC&lt;&#x2F;div&gt; &lt;div class&#x3D;&quot;item&quot;&gt;A&lt;&#x2F;div&gt;&lt;&#x2F;div&gt; css： 12345.item &#123; width: 10%; border: 1px solid red; word-break: break-all;&#125; 1. 使用css Flex布局flex布局文档 父div设置display: flex时，子div可等高 css： 12345678.wrap&#123; display: flex; &#x2F;&#x2F; 等高&#125;.item &#123; display: flex; &#x2F;&#x2F; 内容垂直居中 align-items:center; &#x2F;&#x2F; 内容垂直居中 justify-content:center; &#x2F;&#x2F; 内容垂直居中&#125; 效果如下图所示： 2. 使用css Table布局css： 12345678.wrap&#123; display: table;&#125;.item &#123; display: table-cell; text-align: center; vertical-align: middle;&#125; 效果跟上面一样 优点：支持ie8/ie9 3. 使用CSS 网格GridGrid布局文档 css： 12345678910111213.wrap&#123; display: grid; grid-gap: 10px; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));&#125;.item &#123; width: 100%; word-break: break-all; border: 1px solid red; margin: auto 0; text-align: center; align-self: center;&#125; 暂未实现通过grid实现内容垂直居中，效果如下： 缺点：兼容性问题差，ie不兼容，个人感觉难上手 4. 使用CSS padding-bottom|margin-bottom正负值相抵 (等高)首先把列的padding-bottom设为一个足够大的值，再把列的margin-bottom设一个与前面的padding- bottom的正值相抵消的负值，父容器设置超出隐藏，这样子父容器的高度就还是它里面的列没有设定padding-bottom时的高度，当它里面的任 一列高度增加了，则父容器的高度被撑到它里面最高那列的高度，其他比这列矮的列则会用它们的padding-bottom来补偿这部分高度差。因为背景是 可以用在padding占用的空间里的，而且边框也是跟随padding变化的，所以就成功的完成了一个障眼法。 css: 12345678910111213.wrap&#123; width: 52%; overflow: hidden;&#125;.item &#123; width: 10%; display: inline-block; vertical-align: top; word-break: break-all; border: 1px solid red; padding-bottom:2000px; margin-bottom:-2000px;&#125; 效果图如下： 优点：兼容性最好缺点：下边框会不显示，需改用父元素的border-bottom，垂直居中难实现 参考： 关于垂直居中的方法总结！","categories":[],"tags":[{"name":"css","slug":"css","permalink":"https://wenzhenyi.github.io/tags/css/"}],"keywords":[]},{"title":"静下来好好学习的网站","slug":"静下来好好学习的网站","date":"2020-02-24T03:45:47.000Z","updated":"2021-07-07T02:49:46.495Z","comments":false,"path":"静下来好好学习的网站/","link":"","permalink":"https://wenzhenyi.github.io/%E9%9D%99%E4%B8%8B%E6%9D%A5%E5%A5%BD%E5%A5%BD%E5%AD%A6%E4%B9%A0%E7%9A%84%E7%BD%91%E7%AB%99/","excerpt":"","text":"scrimba全英文学习 scrimba","categories":[],"tags":[],"keywords":[]},{"title":"如何用Hexo和Git搭建一个免费的线上博客","slug":"buildHexoBlog","date":"2020-02-19T06:45:07.000Z","updated":"2021-07-07T02:49:46.475Z","comments":false,"path":"buildHexoBlog/","link":"","permalink":"https://wenzhenyi.github.io/buildHexoBlog/","excerpt":"","text":"什么是Hexo？Hexo是一个快速、简洁且高效的博客框架。基于node.js；支持MarkDown语法；可扩展性强；博客主题众多，。 开始搭建1. 安装Hexo所需环境： node git 利用npm安装Hexo 1$ npm install -g hexo-cli hexo 2. 本地搭建Hexo 安装 Hexo 完成后，进入电脑的文件夹内打开控制台(shift + 右键 -&gt; 在此处打开powershell窗口) 执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件： 123$ hexo init &lt;folder&gt;$ cd &lt;folder&gt;$ npm install 新建完成后文件夹目录如下： 1234567├── _config.yml├── package.json├── scaffolds├── source| ├── _drafts| └── _posts└── themes 最新操作查看官方文档 3. 下载主题（如果想用原装主题的可跳过）主题可在官网的theme目录下进入： 我选用的主题是叫hexo-theme-snippet的 github地址为https://github.com/shenliyang/hexo-theme-snippet 样子是这样的（主要看重右侧的站内搜索功能）： 具体安装步骤可见github上文档，但有需要注意的地方： 执行这一步，会出现以下的问题： 1Cannot find module &#39;gulp-less&#39; 解决： 导致这个问题是因为执行这个gulp时引用的包没有安装 我们可以打开themes/hexo-theme-snippet/gulpfile.js 最好的解决方法，在package.json加上这段 12345678910111213&quot;dependencies&quot;: &#123; &quot;gulp-autoprefixer&quot;: &quot;^7.0.1&quot;, &quot;gulp-htmlclean&quot;: &quot;^2.7.22&quot;, &quot;gulp-htmlmin&quot;: &quot;^5.0.1&quot;, &quot;gulp-less&quot;: &quot;^4.0.1&quot;, &quot;gulp-minify-css&quot;: &quot;^1.2.4&quot;, &quot;gulp-notify&quot;: &quot;^3.2.0&quot;, &quot;gulp-plumber&quot;: &quot;^1.2.1&quot;, &quot;gulp-rename&quot;: &quot;^2.0.0&quot;, &quot;gulp-rev-append&quot;: &quot;^0.1.8&quot;, &quot;gulp-sequence&quot;: &quot;^1.0.0&quot;, &quot;gulp-uglify&quot;: &quot;^3.0.2&quot;&#125; 然后再 npm install 一次 安装完包后还会遇到一个问题： 1default function must be specified 造成这个问题的原因是gulp版本的问题，因为这个主题是用的gulp3，而现在是gulp4的版本，不支持原来的写法，解决方法如下： 原来： 1234567&#x2F;&#x2F; 同步执行taskgulp.task(&#39;deploy&#39;, sequence([&#39;minify-css&#39;, &#39;minify-js&#39;], &#39;rev&#39;, &#39;minify-html&#39;));&#x2F;&#x2F; 部署前代码处理gulp.task(&#39;default&#39;, [&#39;deploy&#39;], function(e) &#123; console.log(&quot;[complete] please execute： hexo d&quot;);&#125;) 更改为： 1234567&#x2F;&#x2F; 同步执行taskgulp.task(&#39;deploy&#39;, gulp.series(gulp.parallel([&#39;minify-css&#39;, &#39;minify-js&#39;]), &#39;rev&#39;, &#39;minify-html&#39;));&#x2F;&#x2F; 部署前代码处理gulp.task(&#39;default&#39;, gulp.parallel([&#39;deploy&#39;]), function(e) &#123; console.log(&quot;[complete] please execute： hexo d&quot;);&#125;) 其中 gulp.parallel: 可以并行计算 gulp.series: 按照顺序执行 在_config.yml里设置主题 找到theme选项并设置 1theme: hexo-theme-snippet 现在在控制台输入hexo g打开本地项目就能看到运用了主题后的博客了！！ 4. 在外网上挂载项目我们使用Git自带的一个功能，而且还免费~ 首先创建一个Git项目,项目名为自己的用户名加.github.io,比如我的项目名叫：wenzhenyi.github.io 打开存放hexo项目的文件夹，找到_config.yml配置文件，找到deploy，进行如下配置，完成保存。 1234deploy: type: git repository: https:&#x2F;&#x2F;github.com&#x2F;wenzhenyi&#x2F;wenzhenyi.github.io.git &#x2F;&#x2F;将地址换成自己的 branch: master 仓库地址可以在这里复制： 在控制台执行以下命令 123运行：hexo clean &#x2F;&#x2F; 清除缓存文件 (db.json) 和已生成的静态文件 (public)运行：hexo g &#x2F;&#x2F; 本地生成静态文件运行：hexo d &#x2F;&#x2F; 将本地静态文件推送至Github 注意：推送到github其实是生成的静态文件 最后访问：http://wenzhenyi.github.io 记录遇到的BUG系统上禁止运行脚本：123hexo : 无法加载文件 C:\\Users\\Administrator\\AppData\\Roaming\\npm\\hexo.ps1，因为在此系统上禁止运行脚本。有关详细信息，请参阅 http:&#x2F;&#x2F;go.microsoft.com&#x2F;fwlink&#x2F;?LinkID&#x3D;135170 中的 about_Execution_Policies。所在位置 行:1 字符: 1 问题解决： 以管理员身份运行powershell 执行set-executionpolicy remotesigned 输入 y SyntaxError: Invalid regular expression flags1return data.replace(&#x2F;&lt;head&gt;(?!&lt;\\&#x2F;head&gt;).+?&lt;\\&#x2F;head&gt;&#x2F;s, str &#x3D;&gt; str.replace(&#39;&lt;&#x2F;head&gt;&#39;, &#96;$&#123;hexoGeneratorTag&#125;&lt;&#x2F;head&gt;&#96;)); 问题解决: 升级node版本(原本是8.4的)","categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://wenzhenyi.github.io/tags/hexo/"}],"keywords":[]},{"title":"Hello World","slug":"hello-world","date":"2020-02-17T14:44:52.000Z","updated":"2021-07-07T02:49:46.493Z","comments":true,"path":"hello-world/","link":"","permalink":"https://wenzhenyi.github.io/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[],"keywords":[]}]}