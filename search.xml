<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CSS面试</title>
    <url>/20200303CSS%E9%9D%A2%E8%AF%95/</url>
    <content><![CDATA[<h2 id="css盒模型"><a href="#css盒模型" class="headerlink" title="css盒模型"></a>css盒模型</h2><blockquote>
<p>css盒模型基本概念？</p>
</blockquote>
<ol>
<li><p>盒模型由content（内容区域），padding（内边距），border（边框），margin（外边距）组成。</p>
</li>
<li><p>当对一个文档进行布局的时候，浏览器的渲染引擎会根据这两个标准的其中一个将所有元素表示为一个个矩形的盒子</p>
</li>
<li><p>分类：标准模型、IE模型</p>
</li>
</ol>
<blockquote>
<p>标准模型和IE模型的区别：计算高度和宽度的不同，怎么不同，高度宽度是怎么计算的？</p>
</blockquote>
<ol>
<li>标准模型</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">div宽度 &#x3D; content &#x2F;&#x2F;改变padding或border宽度，div宽度会变化</span><br><span class="line">box-sizing:content-box;  &#x2F;*设置标准盒子*&#x2F;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>IE模型（怪异盒子模型）</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">div宽度 &#x3D; content + padding + border &#x2F;&#x2F;改变padding或border宽度，div宽度不会变化</span><br><span class="line">box-sizing: border-box;  &#x2F;*设置标准盒子*&#x2F;</span><br></pre></td></tr></table></figure>

<p><img src="/20200303CSS%E9%9D%A2%E8%AF%95/%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B.png" alt="盒子模型"></p>
]]></content>
  </entry>
  <entry>
    <title>Gulp学习</title>
    <url>/Gulp%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p>构建工具:<br>  自动化。对于需要反复重复的任务，例如压缩（minification）、编译、单元测试、linting等，自动化工具可以减轻你的劳动，简化你的工作。<br>  gulp或者grunt都仅仅是一个操作平台，他们本身做不了任何事情，要做事情需要通过插件</p>
<p>1.gulp的使用<br>  全局安装：<br>      npm install –global gulp<br>  创建项目：<br>      LearnGulp<br>  项目依赖安装：<br>      npm install –save-dev gulp<br>  在项目根目录下创建一个名为 gulpfile.js 的文件：<br>      var gulp = require(‘gulp’);<br>      gulp.task(‘default’, function() {<br>      // 将你的默认的任务代码放在这<br>      });<br>  运行<br>      gulp<br>2.gulp的方法<br>  gulp.task(str,fn)<br>    创建一个gulp任务<br>  gulp.src(path)<br>    文件来源<br>  gulp.dest(path)<br>    操作之后的文件到哪里去<br>  .pipe(package)<br>    执行一个gulp功能<br>  gulp.watch()<br>    监听<br>  gulp.start()<br>    执行gulp任务<br>3.插件<br>  1.压缩JavaScript文件<br>    1.安装插件<br>      npm install –save-dev gulp-uglify<br>      代码<br>      gulp.task(“jsuglify”,function(){<br>        gulp.src(“src/js/demo.js”)<br>            .pipe(jsUglify())<br>            .pipe(gulp.dest(“dist/js”))<br>      })<br>  2.压缩CSS文件<br>    1.安装<br>      npm install –save-dev gulp-minify-css<br>  3.压缩HTML文件<br>    1.安装<br>      npm install –save-dev gulp-minify-html<br>  4.图片压缩<br>    npm install –save-dev gulp-imagemin<br>  5.代码检查<br>    npm install –save-dev gulp-jshint jshint<br>    公司learder自己编写代码规范，按照他的规范来写代码！！！<br>  6.合并、重命名<br>    npm install –save-dev gulp-concat gulp-rename<br>  7.Less编译为CSS文件<br>    npm install –save-dev gulp-less<br>  8.监听<br>    gulp.task(“watchLess”,function(){<br>      gulp.watch(“src/css/*.less”,function(){<br>        gulp.run(“reless”)<br>      })<br>    })<br>  9.热更新：<br>    1.命令：npm install gulp-livereload –save-dev<br>    2.全局服务器：npm install -g http-server<br>    3.浏览器打开：chrome://extensions/ 浏览器插件：LiveReload （直接点击启动）<br>    4.编写热更新的代码<br>    5.启动热更新<br>      1.在项目根目录下启动http-server<br>      2.启动热更新：hot<br>      3.打开浏览器启动项目<br>      4.启动浏览器（livereload）插件，将空心圆点成实心圆</p>
]]></content>
      <tags>
        <tag>Gulp</tag>
      </tags>
  </entry>
  <entry>
    <title>JS设计模式 - 面向对象</title>
    <url>/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="类和对象的概念"><a href="#类和对象的概念" class="headerlink" title="类和对象的概念"></a>类和对象的概念</h2><blockquote>
<p>类就是拥有相等功能和相同的属性的对象的集合 – 抽象的<br>对象就是类的实例 – 具体</p>
</blockquote>
<p>生活角度看类和对象</p>
<p>如果人是类，小名就是对象、小花也是对象<br>如果电脑是类，桌上的这两台电脑就是对象</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Person &#123;</span><br><span class="line">  constructor(name, age) &#123;</span><br><span class="line">    this.name &#x3D; name;</span><br><span class="line">    this.age &#x3D; age;</span><br><span class="line">  &#125;</span><br><span class="line">  say() &#123;</span><br><span class="line">    alert(&#96;$&#123;this.name&#125; is eating&#96;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 调用</span><br><span class="line">var wang &#x3D; new Person(&quot;wang&quot;, 20); &#x2F;&#x2F; 初始化小王</span><br><span class="line">wang.say();  &#x2F;&#x2F; wang is eating</span><br><span class="line">var zhang &#x3D; new Person(&quot;zhang&quot;, 50); &#x2F;&#x2F; 初始化小张</span><br><span class="line">zhang.say(); &#x2F;&#x2F; zhang is eating</span><br></pre></td></tr></table></figure>

<h2 id="面向对象三要素：封装，继承，多态"><a href="#面向对象三要素：封装，继承，多态" class="headerlink" title="面向对象三要素：封装，继承，多态"></a>面向对象三要素：封装，继承，多态</h2><h3 id="继承（子类继承父类）"><a href="#继承（子类继承父类）" class="headerlink" title="继承（子类继承父类）"></a>继承（子类继承父类）</h3><blockquote>
<p>作用：继承可将公共方法抽离出来，提高复用，减少冗余</p>
</blockquote>
<p>Person类与上面的类一样</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Student extends Person &#123;</span><br><span class="line">  constructor(name, age, number) &#123;</span><br><span class="line">    super(name, age);</span><br><span class="line">    this.number &#x3D; number;</span><br><span class="line">  &#125;</span><br><span class="line">  study() &#123;</span><br><span class="line">    alert(&#96;$&#123;this.name&#125; is studing&#96;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var xiaoming &#x3D; new Student(&#39;xiaoming&#39;, 10, &#39;A1&#39;);</span><br><span class="line">xiaoming.say();   &#x2F;&#x2F; xiaoming is eating</span><br><span class="line">xiaoming.study(); &#x2F;&#x2F; xiaoming is studing</span><br></pre></td></tr></table></figure>

<h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><blockquote>
<p>目前ts内可用，比较规范 以下代码需ts环境下运行 <a href="http://www.typescriptlang.org/play/" target="_blank" rel="noopener">http://www.typescriptlang.org/play/</a></p>
</blockquote>
<ul>
<li><ol>
<li>public 完全开放</li>
</ol>
</li>
<li><ol start="2">
<li>protected 对子类开放</li>
</ol>
</li>
<li><ol start="3">
<li>private 对自己开放</li>
</ol>
</li>
</ul>
<p>作用：</p>
<ul>
<li><ol>
<li>减少耦合，不该外露的不外露</li>
</ol>
</li>
<li><ol start="2">
<li>利于数据，接口的权限管理</li>
</ol>
</li>
<li><ol start="3">
<li>ES6暂时不支持，一般认为 _开头的属性是private</li>
</ol>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Person &#123;</span><br><span class="line">  name: any</span><br><span class="line">  age: number</span><br><span class="line">  protected weight: any &#x2F;&#x2F; 受保护的属性，只有自己或者子类可以访问</span><br><span class="line">  constructor(name: any, age: number) &#123;</span><br><span class="line">    this.name &#x3D; name;</span><br><span class="line">    this.age &#x3D; age;</span><br><span class="line">    this.weight &#x3D; 120</span><br><span class="line">  &#125;</span><br><span class="line">  say() &#123;</span><br><span class="line">    alert(&#96;$&#123;this.name&#125; is eating&#96;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Student extends Person &#123;</span><br><span class="line">  number: number</span><br><span class="line">  private girlfriend: any</span><br><span class="line">  constructor(name: any, age: number, number: number) &#123;</span><br><span class="line">    super(name, age);</span><br><span class="line">    this.number &#x3D; number;</span><br><span class="line">    this.girlfriend &#x3D; &#39;xiaoli&#39;</span><br><span class="line">  &#125;</span><br><span class="line">  study() &#123;</span><br><span class="line">    alert(&#96;$&#123;this.name&#125; is studing&#96;);</span><br><span class="line">  &#125;</span><br><span class="line">  getWeight() &#123;</span><br><span class="line">    alert(&#96;weight $&#123;this.weight&#125;&#96;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let xiaoming &#x3D; new Student(&#39;xiaoming&#39;, 10, 12)</span><br><span class="line">xiaoming.getWeight()</span><br></pre></td></tr></table></figure>

<h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><blockquote>
<p>同一个接口，不同的实现<br>JS 应用极少<br>需要结合Java等语言的接口，重写，重载等功能</p>
</blockquote>
<p>作用：</p>
<ul>
<li>保持了子类的开放性和灵活性</li>
<li>面向接口编程(JS引用较少)</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class A extends Person &#123;</span><br><span class="line">  constructor(name) &#123;</span><br><span class="line">    super(name)</span><br><span class="line">  &#125;</span><br><span class="line">  saySomething() &#123;</span><br><span class="line">    alert(&quot;Im A&quot;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class B extends Person &#123;</span><br><span class="line">  constructor(name) &#123;</span><br><span class="line">    super(name)</span><br><span class="line">  &#125;</span><br><span class="line">  saySomething() &#123;</span><br><span class="line">    alert(&quot;Im B&quot;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let a &#x3D; new A(&#39;A&#39;)</span><br><span class="line">a.saySomething() &#x2F;&#x2F; Im A</span><br><span class="line">let b &#x3D; new B(&#39;B&#39;)</span><br><span class="line">b.saySomething() &#x2F;&#x2F; Im B</span><br></pre></td></tr></table></figure>

<h2 id="JS应用面向对象实例："><a href="#JS应用面向对象实例：" class="headerlink" title="JS应用面向对象实例："></a>JS应用面向对象实例：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * -----------------------------------------------------------------</span><br><span class="line"> * JS应用实例</span><br><span class="line"> * JQuery</span><br><span class="line"> *&#x2F;</span><br><span class="line"></span><br><span class="line">class JQuery &#123;</span><br><span class="line">  constructor(selector) &#123;</span><br><span class="line">    let slice &#x3D; Array.prototype.slice</span><br><span class="line">    let dom &#x3D; slice.call(document.querySelectorAll(selector))</span><br><span class="line">    let len &#x3D; dom ? dom.length : 0</span><br><span class="line">    for (let i &#x3D; 0; i &lt; len; i++) &#123;</span><br><span class="line">      this[i] &#x3D; dom[i]</span><br><span class="line">    &#125;</span><br><span class="line">    this.length &#x3D; len</span><br><span class="line">    this.selector &#x3D; selector</span><br><span class="line">  &#125;</span><br><span class="line">  append(node) &#123;</span><br><span class="line">    &#x2F;&#x2F; ...</span><br><span class="line">  &#125;</span><br><span class="line">  addClass(name) &#123;</span><br><span class="line">    &#x2F;&#x2F; ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">window.$ &#x3D; function(selector) &#123;</span><br><span class="line">  &#x2F;&#x2F; 工厂模式</span><br><span class="line">  return new JQuery(selector)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="为什么要使用面向对象"><a href="#为什么要使用面向对象" class="headerlink" title="为什么要使用面向对象"></a>为什么要使用面向对象</h2><blockquote>
<p>程序执行：顺序，判断，循环  —结构化</p>
</blockquote>
<blockquote>
<p>面向对象 — 数据结构化</p>
</blockquote>
<p>对于计算机，结构化的东西才是最简单的</p>
<p>编程应该 简单 &amp; 抽象</p>
<h2 id="使用面向对象意义"><a href="#使用面向对象意义" class="headerlink" title="使用面向对象意义"></a>使用面向对象意义</h2><p><strong>数据结构化</strong></p>
]]></content>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>React Hooks系列useEffect</title>
    <url>/ReactHooks%E7%B3%BB%E5%88%97-useEffect/</url>
    <content><![CDATA[<p>在使用React Hooks时，React Hooks作用非常大，该系列归纳工作中遇到的关于React Hooks api的应用场景和查找资料中深入了解的一些问题，对React的掌握更上一层楼，该系列包含以下内容：</p>
<ul>
<li><a href="/ReactHooks系列-useEffect" target="_blank">useEffect</a></li>
</ul>
<p>以下为useEffect的使用：</p>
<h2 id="参考资源"><a href="#参考资源" class="headerlink" title="参考资源"></a>参考资源</h2><p><a href="https://juejin.cn/post/6844903806090608647#heading-16" target="_blank" rel="noopener">精读《useEffect 完全指南》</a></p>
]]></content>
      <tags>
        <tag>React</tag>
        <tag>useEffect</tag>
      </tags>
  </entry>
  <entry>
    <title>如何用Hexo和Git搭建一个免费的线上博客</title>
    <url>/buildHexoBlog/</url>
    <content><![CDATA[<h1 id="什么是Hexo？"><a href="#什么是Hexo？" class="headerlink" title="什么是Hexo？"></a>什么是Hexo？</h1><p>Hexo是一个快速、简洁且高效的博客框架。基于node.js；支持MarkDown语法；可扩展性强；博客主题众多，。</p>
<h1 id="开始搭建"><a href="#开始搭建" class="headerlink" title="开始搭建"></a>开始搭建</h1><h2 id="1-安装Hexo"><a href="#1-安装Hexo" class="headerlink" title="1. 安装Hexo"></a>1. 安装Hexo</h2><p>所需环境：</p>
<ul>
<li>node</li>
<li>git </li>
</ul>
<p>利用npm安装Hexo</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo-cli hexo</span><br></pre></td></tr></table></figure>

<h2 id="2-本地搭建Hexo"><a href="#2-本地搭建Hexo" class="headerlink" title="2. 本地搭建Hexo"></a>2. 本地搭建Hexo</h2><ol>
<li>安装 Hexo 完成后，进入电脑的文件夹内打开控制台(shift + 右键 -&gt; 在此处打开powershell窗口)</li>
<li>执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo init &lt;folder&gt;</span><br><span class="line">$ <span class="built_in">cd</span> &lt;folder&gt;</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure>

<p>新建完成后文件夹目录如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure>

<p><a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="noopener" title="hexo官网">最新操作查看官方文档</a></p>
<h2 id="3-下载主题（如果想用原装主题的可跳过）"><a href="#3-下载主题（如果想用原装主题的可跳过）" class="headerlink" title="3. 下载主题（如果想用原装主题的可跳过）"></a>3. 下载主题（如果想用原装主题的可跳过）</h2><p>主题可在官网的theme目录下进入：</p>
<p><img src="/buildHexoBlog/theme1.png" alt="主题"></p>
<p>我选用的主题是叫<strong>hexo-theme-snippet</strong>的</p>
<p>github地址为<code>https://github.com/shenliyang/hexo-theme-snippet</code></p>
<p>样子是这样的（主要看重右侧的站内搜索功能）：</p>
<p><img src="/buildHexoBlog/theme2.png" alt="主题2"></p>
<p>具体安装步骤可见github上<a href="https://github.com/shenliyang/hexo-theme-snippet" target="_blank" rel="noopener" title="主题文档">文档</a>，但有需要注意的地方：</p>
<p><img src="/buildHexoBlog/gulp.png" alt="gulp"></p>
<p>执行这一步，会出现以下的问题：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Cannot find module &#39;gulp-less&#39;</span><br></pre></td></tr></table></figure>

<p>解决：</p>
<p>导致这个问题是因为执行这个gulp时引用的包没有安装</p>
<p>我们可以打开themes/hexo-theme-snippet/gulpfile.js</p>
<p><img src="/buildHexoBlog/gulp2.png" alt="gulp2"></p>
<p>最好的解决方法，在package.json加上这段</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;dependencies&quot;: &#123;</span><br><span class="line">  &quot;gulp-autoprefixer&quot;: &quot;^7.0.1&quot;,</span><br><span class="line">  &quot;gulp-htmlclean&quot;: &quot;^2.7.22&quot;,</span><br><span class="line">  &quot;gulp-htmlmin&quot;: &quot;^5.0.1&quot;,</span><br><span class="line">  &quot;gulp-less&quot;: &quot;^4.0.1&quot;,</span><br><span class="line">  &quot;gulp-minify-css&quot;: &quot;^1.2.4&quot;,</span><br><span class="line">  &quot;gulp-notify&quot;: &quot;^3.2.0&quot;,</span><br><span class="line">  &quot;gulp-plumber&quot;: &quot;^1.2.1&quot;,</span><br><span class="line">  &quot;gulp-rename&quot;: &quot;^2.0.0&quot;,</span><br><span class="line">  &quot;gulp-rev-append&quot;: &quot;^0.1.8&quot;,</span><br><span class="line">  &quot;gulp-sequence&quot;: &quot;^1.0.0&quot;,</span><br><span class="line">  &quot;gulp-uglify&quot;: &quot;^3.0.2&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后再 <code>npm install</code> 一次</p>
<p>安装完包后还会遇到一个问题：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">default function must be specified</span><br></pre></td></tr></table></figure>

<p>造成这个问题的原因是gulp版本的问题，因为这个主题是用的gulp3，而现在是gulp4的版本，不支持原来的写法，解决方法如下：</p>
<p>原来：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 同步执行task</span><br><span class="line">gulp.task(&#39;deploy&#39;, sequence([&#39;minify-css&#39;, &#39;minify-js&#39;], &#39;rev&#39;, &#39;minify-html&#39;));</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 部署前代码处理</span><br><span class="line">gulp.task(&#39;default&#39;, [&#39;deploy&#39;], function(e) &#123;</span><br><span class="line">    console.log(&quot;[complete] please execute： hexo d&quot;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>更改为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 同步执行task</span><br><span class="line">gulp.task(&#39;deploy&#39;, gulp.series(gulp.parallel([&#39;minify-css&#39;, &#39;minify-js&#39;]), &#39;rev&#39;, &#39;minify-html&#39;));</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 部署前代码处理</span><br><span class="line">gulp.task(&#39;default&#39;, gulp.parallel([&#39;deploy&#39;]), function(e) &#123;</span><br><span class="line">    console.log(&quot;[complete] please execute： hexo d&quot;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>其中</p>
<ul>
<li>gulp.parallel: 可以并行计算</li>
<li>gulp.series: 按照顺序执行</li>
</ul>
<p>在_config.yml里设置主题</p>
<p>找到theme选项并设置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">theme: hexo-theme-snippet</span><br></pre></td></tr></table></figure>

<p>现在在控制台输入<code>hexo g</code>打开本地项目就能看到运用了主题后的博客了！！</p>
<h2 id="4-在外网上挂载项目"><a href="#4-在外网上挂载项目" class="headerlink" title="4. 在外网上挂载项目"></a>4. 在外网上挂载项目</h2><p>我们使用Git自带的一个功能，而且还免费~</p>
<p>首先创建一个Git项目,项目名为自己的用户名加.github.io,比如我的项目名叫：<code>wenzhenyi.github.io</code></p>
<p><img src="/buildHexoBlog/git2.png" alt="git2"></p>
<p>打开存放hexo项目的文件夹，找到_config.yml配置文件，找到deploy，进行如下配置，完成保存。</p>
<p><img src="/buildHexoBlog/set1.png" alt="set1"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: https:&#x2F;&#x2F;github.com&#x2F;wenzhenyi&#x2F;wenzhenyi.github.io.git   &#x2F;&#x2F;将地址换成自己的</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<p>仓库地址可以在这里复制：</p>
<p><img src="/buildHexoBlog/git1.png" alt="git1"></p>
<p>在控制台执行以下命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">运行：hexo clean  &#x2F;&#x2F; 清除缓存文件 (db.json) 和已生成的静态文件 (public)</span><br><span class="line">运行：hexo g  &#x2F;&#x2F; 本地生成静态文件</span><br><span class="line">运行：hexo d  &#x2F;&#x2F; 将本地静态文件推送至Github</span><br></pre></td></tr></table></figure>

<p><strong>注意：推送到github其实是生成的静态文件</strong></p>
<p>最后访问：<code>http://wenzhenyi.github.io</code></p>
<hr>
<h1 id="记录遇到的BUG"><a href="#记录遇到的BUG" class="headerlink" title="记录遇到的BUG"></a>记录遇到的BUG</h1><h2 id="系统上禁止运行脚本："><a href="#系统上禁止运行脚本：" class="headerlink" title="系统上禁止运行脚本："></a>系统上禁止运行脚本：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo : 无法加载文件 C:\Users\Administrator\AppData\Roaming\npm\hexo.ps1，因为在此系统上禁止运行脚本。有关详细信息，请参阅 http:&#x2F;&#x2F;go.micr</span><br><span class="line">osoft.com&#x2F;fwlink&#x2F;?LinkID&#x3D;135170 中的 about_Execution_Policies。</span><br><span class="line">所在位置 行:1 字符: 1</span><br></pre></td></tr></table></figure>

<p>问题解决：</p>
<ol>
<li>以管理员身份运行powershell</li>
<li>执行<code>set-executionpolicy remotesigned</code></li>
<li>输入 <code>y</code></li>
</ol>
<h2 id="SyntaxError-Invalid-regular-expression-flags"><a href="#SyntaxError-Invalid-regular-expression-flags" class="headerlink" title="SyntaxError: Invalid regular expression flags"></a>SyntaxError: Invalid regular expression flags</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">return data.replace(&#x2F;&lt;head&gt;(?!&lt;\&#x2F;head&gt;).+?&lt;\&#x2F;head&gt;&#x2F;s, str &#x3D;&gt; str.replace(&#39;&lt;&#x2F;head&gt;&#39;, &#96;$&#123;hexoGeneratorTag&#125;&lt;&#x2F;head&gt;&#96;));</span><br></pre></td></tr></table></figure>

<p>问题解决:</p>
<ol>
<li>升级node版本(原本是8.4的)</li>
</ol>
]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>css特殊性</title>
    <url>/css%E7%89%B9%E6%AE%8A%E6%80%A7/</url>
    <content><![CDATA[<p>一下被问到愣住了，现在查阅了资料发现是经常用的，还是要积累一下</p>
<h2 id="CSS的特殊性"><a href="#CSS的特殊性" class="headerlink" title="CSS的特殊性"></a>CSS的特殊性</h2><p>特殊性是用于计算元素最终使用哪个样式。</p>
<p>先看以下等级划分(由高到低)：</p>
<ol>
<li>important，!important          <strong>等级为无穷大∞</strong></li>
<li>内联样式，在标签内style=””。     <strong>等级为1000</strong></li>
<li>ID选择器，#content。            <strong>等级为100</strong></li>
<li>类选择器，.content。            <strong>等级为10</strong></li>
<li>标签选择器，伪元素选择器，div div:before <strong>等级为1</strong></li>
<li>通配符，*                       <strong>等级为0</strong></li>
<li>继承                            <strong>不贡献，比0还小</strong></li>
</ol>
<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>继承不能继承边框，盒子模型的外边距、内边距等等。<br>继承是不贡献特殊性的，但要注意和0的区别。<br>0特殊性会优先于无特殊性</p>
<p>如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*&#123;color: gray&#125;</span><br><span class="line">h1&#123;color: black&#125;</span><br><span class="line"> </span><br><span class="line">&lt;h1&gt;css &lt;em&gt;specificity&lt;&#x2F;em&gt;&lt;&#x2F;h1&gt;</span><br></pre></td></tr></table></figure>

<p>其中css为black色，em标签里的specificity为gray色，因为0特殊性比继承值优先级高</p>
<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>如果遇到了似乎没有起作用的CSS规则，很可能是出现了特殊性冲突。请在你的选择器中添加他的一个父元素的ID，从而提高它的特殊性。如果这能解决问题，就说明样式表中其他地方很可能有更特殊的规则，它覆盖了你的规则。如果是这种情况，你可能需要检查代码，解决特殊性冲突，让代码尽可能简洁。</p>
]]></content>
      <tags>
        <tag>css</tag>
        <tag>前端面试</tag>
      </tags>
  </entry>
  <entry>
    <title>css等高的方式</title>
    <url>/css%E7%AD%89%E9%AB%98%E7%9A%84%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<p><strong>问题：在一列里，div之间自适应等高，内容垂直居中</strong></p>
<p>html：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;wrap&quot;&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;item&quot;&gt;AAAA&lt;&#x2F;div&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;item&quot;&gt;BBBBBBBBBBBBBBBBBB&lt;&#x2F;div&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;item&quot;&gt;A&lt;&#x2F;div&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;item&quot;&gt;CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC&lt;&#x2F;div&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;item&quot;&gt;A&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<p>css：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.item &#123;</span><br><span class="line">  width: 10%;</span><br><span class="line">  border: 1px solid red;</span><br><span class="line">  word-break: break-all;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1-使用css-Flex布局"><a href="#1-使用css-Flex布局" class="headerlink" title="1. 使用css Flex布局"></a>1. 使用css Flex布局</h2><p><a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="noopener" title="flex布局">flex布局文档</a></p>
<p>父div设置<code>display: flex</code>时，子div可等高</p>
<p>css：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.wrap&#123;</span><br><span class="line">  display: flex; &#x2F;&#x2F; 等高</span><br><span class="line">&#125;</span><br><span class="line">.item &#123;</span><br><span class="line">  display: flex;  &#x2F;&#x2F; 内容垂直居中</span><br><span class="line">  align-items:center; &#x2F;&#x2F; 内容垂直居中</span><br><span class="line">  justify-content:center; &#x2F;&#x2F; 内容垂直居中</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>效果如下图所示：</p>
<p><img src="/css%E7%AD%89%E9%AB%98%E7%9A%84%E6%96%B9%E5%BC%8F/css1.png" alt="css1"></p>
<hr>
<h2 id="2-使用css-Table布局"><a href="#2-使用css-Table布局" class="headerlink" title="2. 使用css Table布局"></a>2. 使用css Table布局</h2><p>css：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.wrap&#123;</span><br><span class="line">  display: table;</span><br><span class="line">&#125;</span><br><span class="line">.item &#123;</span><br><span class="line">  display: table-cell;</span><br><span class="line">  text-align: center;</span><br><span class="line">  vertical-align: middle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>效果跟上面一样</p>
<p>优点：支持ie8/ie9</p>
<hr>
<h2 id="3-使用CSS-网格Grid"><a href="#3-使用CSS-网格Grid" class="headerlink" title="3. 使用CSS 网格Grid"></a>3. 使用CSS 网格Grid</h2><p><a href="http://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html" target="_blank" rel="noopener" title="Grid布局">Grid布局文档</a></p>
<p>css：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.wrap&#123;</span><br><span class="line">  display: grid;</span><br><span class="line">  grid-gap: 10px;</span><br><span class="line">  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));</span><br><span class="line">&#125;</span><br><span class="line">.item &#123;</span><br><span class="line">  width: 100%;</span><br><span class="line">  word-break: break-all;</span><br><span class="line">  border: 1px solid red;</span><br><span class="line">  margin: auto 0;</span><br><span class="line">  text-align: center;</span><br><span class="line">  align-self: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>暂未实现通过grid实现内容垂直居中，效果如下：</p>
<p><img src="/css%E7%AD%89%E9%AB%98%E7%9A%84%E6%96%B9%E5%BC%8F/css2.png" alt="css2"></p>
<p>缺点：兼容性问题差，ie不兼容，个人感觉难上手</p>
<h2 id="4-使用CSS-padding-bottom-margin-bottom正负值相抵-等高"><a href="#4-使用CSS-padding-bottom-margin-bottom正负值相抵-等高" class="headerlink" title="4. 使用CSS padding-bottom|margin-bottom正负值相抵 (等高)"></a>4. 使用CSS padding-bottom|margin-bottom正负值相抵 (等高)</h2><p>首先把列的padding-bottom设为一个足够大的值，再把列的margin-bottom设一个与前面的padding- bottom的正值相抵消的负值，父容器设置超出隐藏，这样子父容器的高度就还是它里面的列没有设定padding-bottom时的高度，当它里面的任 一列高度增加了，则父容器的高度被撑到它里面最高那列的高度，其他比这列矮的列则会用它们的padding-bottom来补偿这部分高度差。因为背景是 可以用在padding占用的空间里的，而且边框也是跟随padding变化的，所以就成功的完成了一个障眼法。</p>
<p>css:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.wrap&#123;</span><br><span class="line">  width: 52%;</span><br><span class="line">  overflow: hidden;</span><br><span class="line">&#125;</span><br><span class="line">.item &#123;</span><br><span class="line">  width: 10%;</span><br><span class="line">  display: inline-block;</span><br><span class="line">  vertical-align: top;</span><br><span class="line">  word-break: break-all;</span><br><span class="line">  border: 1px solid red;</span><br><span class="line">  padding-bottom:2000px;</span><br><span class="line">  margin-bottom:-2000px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>效果图如下：</p>
<p><img src="/css%E7%AD%89%E9%AB%98%E7%9A%84%E6%96%B9%E5%BC%8F/css3.png" alt="css3"></p>
<p>优点：兼容性最好<br>缺点：下边框会不显示，需改用父元素的border-bottom，垂直居中难实现</p>
<hr>
<p>参考：</p>
<p><a href="https://www.cnblogs.com/chenhuichao/p/8682925.html" target="_blank" rel="noopener" title="关于垂直居中的方法总结！">关于垂直居中的方法总结！</a></p>
]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>vsCode中常用的插件</title>
    <url>/vsCode%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<h2 id="1-AutoFileName"><a href="#1-AutoFileName" class="headerlink" title="1. AutoFileName"></a>1. AutoFileName</h2><p>自动补充文件名</p>
<h2 id="2-Chinese"><a href="#2-Chinese" class="headerlink" title="2. Chinese"></a>2. Chinese</h2><p>适用于 VS Code 的中文（简体）语言包</p>
<h2 id="3-Code-Runner"><a href="#3-Code-Runner" class="headerlink" title="3. Code Runner"></a>3. Code Runner</h2><p>用于跑小小一段的代码</p>
<h2 id="4-Git-History-Diff"><a href="#4-Git-History-Diff" class="headerlink" title="4. Git History Diff"></a>4. Git History Diff</h2><p>查看git的历史记录以及比较</p>
<h2 id="5-JavaScript-ES6-code-snippets"><a href="#5-JavaScript-ES6-code-snippets" class="headerlink" title="5. JavaScript(ES6) code snippets"></a>5. JavaScript(ES6) code snippets</h2><p>自动补充es6语法</p>
<h2 id="6-Live-Server"><a href="#6-Live-Server" class="headerlink" title="6. Live Server"></a>6. Live Server</h2><p>在当前文件夹创建小型服务器</p>
<h2 id="7-Open-in-Browser"><a href="#7-Open-in-Browser" class="headerlink" title="7. Open in Browser"></a>7. Open in Browser</h2><p>右键从浏览器打开此文件</p>
<h2 id="8-Prettier-Code-formatter"><a href="#8-Prettier-Code-formatter" class="headerlink" title="8. Prettier - Code formatter"></a>8. Prettier - Code formatter</h2><p>格式化代码</p>
<h2 id="9-Vetur"><a href="#9-Vetur" class="headerlink" title="9. Vetur"></a>9. Vetur</h2><p>vue集成的工具</p>
<h2 id="10-VS-Color-Picker"><a href="#10-VS-Color-Picker" class="headerlink" title="10. VS Color Picker"></a>10. VS Color Picker</h2><p>颜色选择器</p>
]]></content>
      <tags>
        <tag>vscode</tag>
        <tag>2020年3月</tag>
      </tags>
  </entry>
  <entry>
    <title>工具网站</title>
    <url>/%E5%B7%A5%E5%85%B7%E7%BD%91%E7%AB%99/</url>
    <content><![CDATA[<h2 id="BootCDN-获取线上常用插件的地址"><a href="#BootCDN-获取线上常用插件的地址" class="headerlink" title="BootCDN-获取线上常用插件的地址"></a>BootCDN-获取线上常用插件的地址</h2><p>稳定、快速、免费的前端开源项目 CDN 加速服务</p>
<p><a href="https://www.bootcdn.cn/" target="_blank" rel="noopener" title="BootCDN">BootCDN</a></p>
<h2 id="MDN-前端技术文档"><a href="#MDN-前端技术文档" class="headerlink" title="MDN-前端技术文档"></a>MDN-前端技术文档</h2><p><a href="https://developer.mozilla.org/zh-CN/" target="_blank" rel="noopener" title="MDN">前端技术文档MDN</a></p>
<h2 id="Can-I-Use网站-查找各属性方法在各浏览器的兼容情况"><a href="#Can-I-Use网站-查找各属性方法在各浏览器的兼容情况" class="headerlink" title="Can I Use网站-查找各属性方法在各浏览器的兼容情况"></a>Can I Use网站-查找各属性方法在各浏览器的兼容情况</h2><p><a href="https://www.caniuse.com/" target="_blank" rel="noopener" title="CanIUse">Can I Use</a></p>
<h2 id="Autoprefixer-CSS-online-在线添加浏览器css兼容情况"><a href="#Autoprefixer-CSS-online-在线添加浏览器css兼容情况" class="headerlink" title="Autoprefixer CSS online-在线添加浏览器css兼容情况"></a>Autoprefixer CSS online-在线添加浏览器css兼容情况</h2><p><a href="http://autoprefixer.github.io/" target="_blank" rel="noopener" title="Autoprefixer">Autoprefixer</a></p>
<h2 id="淘宝-NPM-镜像"><a href="#淘宝-NPM-镜像" class="headerlink" title="淘宝 NPM 镜像"></a>淘宝 NPM 镜像</h2><p><a href="https://developer.aliyun.com/mirror/NPM?from=tnpm" target="_blank" rel="noopener" title="NPM">NPM镜像</a></p>
<h2 id="前端好用的开发工具"><a href="#前端好用的开发工具" class="headerlink" title="前端好用的开发工具"></a>前端好用的开发工具</h2><p>FeHelper: chrome插件，包含JSON接口自动格式化，代码美化，代码压缩，二维码生成器，页面取色工具等工具</p>
<p><a href="https://github.com/zxlie/FeHelper/tree/master/apps/static/screenshot/crx" target="_blank" rel="noopener" title="FeHelper">FeHelper</a></p>
]]></content>
  </entry>
  <entry>
    <title>静下来好好学习的网站</title>
    <url>/%E9%9D%99%E4%B8%8B%E6%9D%A5%E5%A5%BD%E5%A5%BD%E5%AD%A6%E4%B9%A0%E7%9A%84%E7%BD%91%E7%AB%99/</url>
    <content><![CDATA[<h2 id="scrimba"><a href="#scrimba" class="headerlink" title="scrimba"></a>scrimba</h2><p>全英文学习</p>
<p><a href="https://scrimba.com/" target="_blank" rel="noopener" title="scrimba">scrimba</a></p>
]]></content>
  </entry>
  <entry>
    <title>手写一个Promise</title>
    <url>/%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AAPromise/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>promise的使用场景很多，手写一个promise也是对自己js知识的一个巩固</p>
]]></content>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
</search>
